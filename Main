
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# switch to the Data segment
	.data
	# global data is defined here

	# Don't forget the backslash-n (newline character)
Name_1:
	.asciiz	"Vincent Luu\n"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# switch to the Text segment
	.text
	# the program is defined here

	.globl	main
main:
	# Whose program is this?
	la	$a0, Homework
	jal	Print_string
	la	$a0, Name_1
	jal	Print_string
	
	
	# int i, j = 2, n = 3;
	# for (i = 0; i <= 16; i++)
	#   {
	#      ... j = testcase[i]
	#      ... calculate n from j
	#      ... print i, j and n
	#   }
	
	# register assignments
	#  $s0   i
	#  $s1   j = testcase[i]
	#  $s2   n
	#  $t0   address of testcase[i]
	#  $a0   argument to Print_integer, Print_string, etc.
	#  add to this list if you use any other registers

	# initialization
	li	$s1, 2			# j = 2
	li	$s2, 3			# n = 3
	
	# for (i = 0; i <= 16; i++)
	li	$s0, 0			# i = 0
	la	$t0, testcase		# address of testcase[i]
	bgt	$s0, 16, bottom
top:
	lw	$s1, 0($t0)		# j = testcase[i]
	# calculate n from j
	move $s2, $zero
	bgeu $s1, 0x80, Elseif1 #if j<0x80
	add $s2, $0, $s1 #otherwise add j to 0 and set it to n
	j end
	Elseif1: #expand to 16 bits
		bgtu $s1, 0x7FF, Elseif2
		andi $t1, $s1, 0x3F #mask of b
		andi $t2, $s1, 0x7C0 #mask of a
		sll $t2, $t2, 2 #shifting a by 2 bits
		addi $t3, $0, 0x80 #mask of 10
		addi $t4, $0, 0xC000 #mask of 110
		sll $s2, $s2, 26 #clear n to all 0 bits
		or $s2, $t1, $s2 #copy b to n
		or $s2, $t3, $s2 #copy 10 to n
		or $s2, $t2, $s2 #copy a to n
		or $s2, $t4, $s2 #copy 110 to n 
		j end
	Elseif2: #expand to 24
		bgtu $s1, 0xFFFF, Elseif3
		andi $t1, $s1, 0x3F #mask of c
		andi $t2, $s1, 0xFC0 #mask of b
		sll $t2, $t2, 2 #shifting b by 2 bits
		andi $t3, $s1, 0x1F000 #mask of a
		sll $t3, $t3, 4 #shifting a by 4 bits
		addi $t4, $0, 0x80 #mask of 10000000
		addi $t5, $0, 0x8000 #mask of 1000000000000000
		addi $t6, $0, 0xE00000 #mask of 111000000000000000000000
		andi $s2, $s2, 0x00000000  #clearing n
		or $s2, $s2, $t1 #copying all temporary values to n
		or $s2, $s2, $t2 
		or $s2, $s2, $t3
		or $s2, $s2, $t4
		or $s2, $s2, $t5
		or $s2, $s2, $t6
		j end
	Elseif3: #expand to 32 bits
		bgtu $s1, 0x10FFFF, Else
		andi $t1, $s1, 0x3F #mask of d
		andi $t2, $s1, 0xFC0 #mask of c
		sll $t2, $t2, 2 #shifting c by 2 bits
		andi $t3, $s1, 0x3F000 #mask of b
		sll $t3, $t3, 4 #shifting b by 4 bits
		andi $t4, $s1, 0x1C0000 #mask of a
		sll $t4, $t4, 6 #shifting a by 6 bits
		addi $t5, $0, 0x80 #mask for constants
		addi $t6, $0, 0x8000
		addi $t7, $0, 0x800000
		addi $t8, $0, 0xF0808080
		andi $s2, $s2, 0x00000000 #clearing n
		or $s2, $s2, $t1 #copying all temorary values to n
		or $s2, $s2, $t2
		or $s2, $s2, $t3
		or $s2, $s2, $t4
		or $s2, $s2, $t5
		or $s2, $s2, $t6
		or $s2, $s2, $t7
		ori $s2, $s2, 0xF0808080
		j end
	Else:
		addi $t1, $0, 0xFFFFFFFF
		or $s2, $s2, $t1
		j end
	end:

	
	# print i, j and n
	move	$a0, $s0	# i
	jal	Print_integer
	la	$a0, sp		# space
	jal	Print_string
	move	$a0, $s1	# j
	jal	Print_hex
	la	$a0, sp		# space
	jal	Print_string
	move	$a0, $s2	# n
	jal	Print_hex
	la	$a0, sp		# space
	jal	Print_string
	move	$a0, $s1	# j
	jal	Print_bin
	la	$a0, sp		# space
	jal	Print_string
	move	$a0, $s2	# n
	jal	Print_bin
	la	$a0, nl		# newline
	jal	Print_string
	
	# for (i = 0; i <= 16; i++)
	addi	$s0, $s0, 1	# i++
	addi	$t0, $t0, 4	# address of testcase[i]
	ble	$s0, 16, top	# i <= 16
bottom:
	
	la	$a0, done	# mark the end of the program
	jal	Print_string
	
	jal	Exit0	# end the program, default return status

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	.data
	# global data is defined here
sp:
	.asciiz	" "	# space
nl:
	.asciiz	"\n"	# newline
done:
	.asciiz	"All done!\n"

testcase:
	# UTF-8 representation is one byte
	.word 0x0000	# nul		# Basic Latin, 0000 - 007F
	.word 0x0024	# $ (dollar sign)
	.word 0x007E	# ~ (tilde)
	.word 0x007F	# del

	# UTF-8 representation is two bytes
	.word 0x0080	# pad		# Latin-1 Supplement, 0080 - 00FF
	.word 0x00A2	# cent sign
	.word 0x0627	# Arabic letter alef
	.word 0x07FF	# unassigned

	# UTF-8 representation is three bytes
	.word 0x0800
	.word 0x20AC	# Euro sign
	.word 0x2233	# anticlockwise contour integral sign
	.word 0xFFFF

	# UTF-8 representation is four bytes
	.word 0x10000
	.word 0x10348	# Hwair, see http://en.wikipedia.org/wiki/Hwair
	.word 0x22E13	# randomly-chosen character
	.word 0x10FFFF

	.word 0x89ABCDEF	# randomly chosen bogus value

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Wrapper functions around some of the system calls
# See P&H COD, Fig. A.9.1, for the complete list.

	.text

	.globl	Print_integer
Print_integer:	# print the integer in register $a0 (decimal)
	li	$v0, 1
	syscall
	jr	$ra

	.globl	Print_string
Print_string:	# print the string whose starting address is in register $a0
	li	$v0, 4
	syscall
	jr	$ra

	.globl	Exit
Exit:		# end the program, no explicit return status
	li	$v0, 10
	syscall
	jr	$ra	# this instruction is never executed

	.globl	Exit0
Exit0:		# end the program, default return status
	li	$a0, 0	# return status 0
	li	$v0, 17
	syscall
	jr	$ra	# this instruction is never executed

	.globl	Exit2
Exit2:		# end the program, with return status from register $a0
	li	$v0, 17
	syscall
	jr	$ra	# this instruction is never executed

# The following syscalls work on MARS, but not on QtSPIM

	.globl	Print_hex
Print_hex:	# print the integer in register $a0 (hexadecimal)
	li	$v0, 34
	syscall
	jr	$ra

	.globl	Print_bin
Print_bin:	# print the integer in register $a0 (binary)
	li	$v0, 35
	syscall
	jr	$ra

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
